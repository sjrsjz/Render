const float Scale=2.1;

// Scaling center
const vec3 Offset=vec3(2.);
const vec3 Scale2=vec3(1.25);

const float fixedRadius2=0.325;
const float minRadius2=0;


void sphereFold(inout vec3 z, inout mat3 dz) {
	float r2 = dot(z,z);
	if (r2< minRadius2) {
		float temp = (fixedRadius2/minRadius2);
		z*= temp; dz*=temp;
	} else if (r2<fixedRadius2) {
		float temp =(fixedRadius2/r2);
		z*=temp; dz*=temp;
	}
}



const float foldingLimit=0.175;
void boxFold(inout vec3 z, inout mat3 dz) {
	vec3 a = (1.0-2.0*step(vec3(foldingLimit),abs(z)));
	dz[0]*=a; dz[1]*=a; dz[2]*=a;
	z = clamp(z, -foldingLimit, foldingLimit) * 2.0 - z;
}
const int Iterations=50;
const int ColorIterations=2;

const float Power=1.75;
void powN2(inout vec3 z, inout mat3 dz) {
	vec3 s=sign(z);
	vec3 z0=z;
	z=pow(abs(z0),vec3(Power));
	vec3 dz0=s*pow(abs(z0),vec3(Power-1))*Power;
	dz[0]*=vec3(dz0.x,1,1);
	dz[1]*=vec3(1,dz0.y,1);
	dz[2]*=vec3(1,1,dz0.z);
}
void rot(inout vec3 z,inout mat3 dz){
    vec3 z0=z;
    mat3 rot0=mat3(0.5,0.,-2,-2,0.5,0.,0.,-2,0.5);
    z*=rot0;
    dz=dz*rot0;
}
float Fractal(vec3 z)
{
   
   z=vec3(-1)*abs(z);
  // if(dBox(z,rd,vec3(1.25))>0) return dBox(z,rd,vec3(1));
	mat3 dz = mat3(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
	//orbitTrap=vec4(1);
	vec3 c = z;
	mat3 dc = dz;
   powN2(c,dc);
	rot(z,dz);
	for (int n = 0; n < Iterations; n++) {
     
		boxFold(z,dz);
		const float t=2.5;const float t2=1/t;
		z*=t;dz*=t;
		z=z+vec3(0.125-0.125*n);
		
		sphereFold(z,dz);
		z*=t2;dz*=t2;
		z*=(Scale*Scale2);
		dz=mat3(dz[0]*Scale*Scale2,dz[1]*Scale*Scale2,dz[2]*Scale*Scale2);
		z += c*Offset;
		dz += dc*mat3(Offset,Offset,Offset);
		if (length(z)>100.0) break;
		//if (n<ColorIterations) orbitTrap = min(orbitTrap, (vec4(abs(z),dot(z,z))));
	}
	const float pow0=2;
	return pow(length(z),pow0)/(pow0*pow(length(z),pow0-2)*length(z*dz))*0.5;
}
float sdBox( vec3 p, vec3 b )
{
    vec3 d = abs(p) - b;
    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

object DE(vec3 pos) {
    object hit0=newObj(1e5,1e5,-1,-1,0);

    hit0=near(hit0,vec3(3,min(Fractal(pos*0.75)*2-0.0025,sdBox(pos,vec3(0.5*0.6))),1));
    return hit0;
}