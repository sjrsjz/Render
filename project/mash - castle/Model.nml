float dot2(in vec2 v ) 
{ 
    return dot(v,v); 
}
float sdCappedCone( vec3 p, float h, float r1, float r2 )
{
  vec2 q = vec2( length(p.xz), p.y );
  vec2 k1 = vec2(r2,h);
  vec2 k2 = vec2(r2-r1,2.0*h);
  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);
  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );
  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
  return s*sqrt( min(dot2(ca),dot2(cb)) );
}
float sdSphere(vec3 p,float r){
    return length(p)-r;
}
float sdEllipsoid( in vec3 p, in vec3 r ) // approximated
{
    float k0 = length(p/r);
    float k1 = length(p/(r*r));
    return k0*(k0-1.0)/k1;
}
float sdRoundedCylinder( vec3 p, float ra, float rb, float h )
{
    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );
    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;
}
float sdCone( in vec3 p, in vec2 c, float h )
{
  // c is the sin/cos of the angle, h is height
  // Alternatively pass q instead of (c,h),
  // which is the point at the base in 2D
  vec2 q = h*vec2(c.x/c.y,-1.0);
    
  vec2 w = vec2( length(p.xz), p.y );
  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );
  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );
  float k = sign( q.y );
  float d = min(dot( a, a ),dot(b, b));
  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );
  return sqrt(d)*sign(s);
}
float sdCappedCylinder( vec3 p, float h, float r )
{
  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);
  return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}
float sdBox( vec3 p, vec3 b )
{
    vec3 d = abs(p) - b;
    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}
float smin( float a, float b, float k )
{
    float h = max(k-abs(a-b),0.0);
    return min(a, b) - h*h*0.25/k;
}
float hash( float n )
{
  return fract(cos(n)*41415.92653);
}
vec4 noised( in vec3 x )
{
    vec3 p = floor(x);
    vec3 w = fract(x);
	vec3 u = w*w*(3.0-2.0*w);
    vec3 du = 6.0*w*(1.0-w);
    
    float n = p.x + p.y*157.0 + 113.0*p.z;
    
    float a = hash(n+  0.0);
    float b = hash(n+  1.0);
    float c = hash(n+157.0);
    float d = hash(n+158.0);
    float e = hash(n+113.0);
	float f = hash(n+114.0);
    float g = hash(n+270.0);
    float h = hash(n+271.0);
	
    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    return vec4( k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z, 
                 du * (vec3(k1,k2,k3) + u.yzx*vec3(k4,k5,k6) + u.zxy*vec3(k6,k4,k5) + k7*u.yzx*u.zxy ));
}

vec4 fbm3D( in vec3 x ,int n)
{
    const float scale  = 1.5;

    float a = 0.0;
    float b = 0.5;
	float f = 1.0;
    vec3  d = vec3(0.0);
//    float t=1.25*min(x.y*2-2,1);
    for( int i=0; i<n; i++ )
    {
        vec4 n = noised(f*x*scale);
        a += b*n.x;           // accumulate values		
        d += b*n.yzw*f*scale; // accumulate derivatives
        b *= 0.5;             // amplitude decrease
        f *= 1.8;             // frequency increase
    }

	return vec4( a, d );
}

// https://iquilezles.org/articles/smin
float smax( float a, float b, float k )
{
    float h = max(k-abs(a-b),0.0);
    return max(a, b) + h*h*0.25/k;
}
float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }
float sdRhombus(vec3 p, float la, float lb, float h, float ra)
{
    p = abs(p);
    vec2 b = vec2(la,lb);
    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );
	vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);
    return min(max(q.x,q.y),0.0) + length(max(q,0.0));
}

vec3 hash33(vec3 p3)
{
	p3 = fract(p3 * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx);

}


float box(vec3 p, vec3 s) {
    p=abs(p)-s;
    return max(p.x, max(p.y,p.z));
	//return length(max(p,vec3(0))) + min(0.,max(p.x,max(p.y,p.z)));
}
// value noise, and its analytical derivatives
float hex(vec3 p, vec3 s) {
  vec3 ap=abs(p);
  float prof=max(ap.x-s.x,(ap.x+ap.z)*.7-s.z);
  return max(ap.y+max(-1.,prof)-s.y,prof);
}

// sdf to randomly moved boxes in a grid of size re
float gribble(vec3 p, vec3 re) {
  vec3 r1=(fract(p/re+.5)-.5)*re;
  return box(r1+hash33(floor(p/4.+.5))*2.-1.,re*.4)*.7;
}
float gap(vec3 p){
    return min(0.2,max(sin(p.y*15)-0.8,0)+max(sin((p.z+floor(p.y*15/PI*0.5-0.25))*10)-0.8,0))*0.1;
}
float tower(vec3 p){
    p.xz=rotClamp(p.xz,6);
    float d=sdBox(p,vec3(1,3,1)-gap(p.zyx));
    
    p.y-=2;
    p.zy=p.yz;
    p.y-=1;
    d=min(d,sdRhombus(p,1,2,0.1,0)-(1-gribble(p*0.5,vec3(1)))*0.2+0.1);
    return d;
}
float tower2(vec3 p){
    p.xz=rotClamp(p.xz,6);
    float d=sdBox(p,vec3(1,3,1)-gap(p.zyx));
    
    p.y-=2;
    p.zy=p.yz;
    p.y-=1;
    d=min(d,max(sdRhombus(p+vec3(0.2,-0.3,0),1,2,0.1,0)-(1-gribble(p*0.5,vec3(1)))*0.2+0.1,sdBox(p,vec3(0.25,5,2))));
    p.xz=rot(p.xz,0.5);
    p.xy=rot(p.xy,0.4);
    d=min(d,sdBox(p,vec3(0.5,0.3,1.))+gap(p.yzx*2));
    return d;
}
float castle(vec3 p){
    float d=1e10;
    vec3 p0=p;
    p.xz=rotClamp(p.xz,6);
    vec3 p1=p;
    p.z-=6.9;
    p.xz=p.zx;
    p.y-=2;
    d=min(d,sdBox(p,vec3(0.35,2,4))+gap(p));
    p.y-=1;p.z=abs(p.z);
    p.z-=4;

    d=min(d,tower(p));

    p=p0;

    p.xz=rot(p.xz,PI/6);
    
    vec3 p2=p;
    //gate
    d=max(d,-sdCappedCylinder(p.xzy+vec3(0,5,-1),1,10));
    d=max(d,-sdBox(p.xzy+vec3(0,5,0),vec3(1,10,1)));
    p=p1;
    p.yz-=vec2(3.75,4);
    d=min(d,tower2(p/1.25)*1.25);
    p=p2;
    p.x=abs(p.x);p.x-=12;
    p.y-=3*1.5;
    d=min(d,tower(p/1.5)*1.5);
    float y0=p.y;
    p.y-=7.5;
    d=min(d,sdCone(p,vec2(1,3),4.5));
    p.y=y0;
    p.xy+=vec2(2,2.5);
    d=min(d,sdBox(p,vec3(2,2.,0.5)-gap(p.zyx)));
    
    p=p0;
    p.y-=6;
    d=min(d,tower2(p/2)*2);
    p.y-=5;
    d=min(d,tower2(p/1.25)*1.25);
    p.y-=7.5;
    d=min(d,sdCone(p,vec2(1,3),4.5));
    return d;
}


object DE(vec3 pos) {
    object hit0=newObj(1e5,1e5,-1,-1,0);
    vec3 pos0=pos*13+vec3(0,7,0);
/*    vec3 pos1=pos;
    pos.y+=60;pos.zx-=100;
    pos0=pos;
    pos*=0.5;
    pos+=vec3(-60,-48.5,10);
    float h=pos.y+70-0.24*terrainH(2.5*pos.xz)-40/(1+0.01*length(pos.xz));
    hit0=near(hit0,vec3(1,h*2,1));
*/
    pos0.xz=rot(pos0.xz,PI/3-PI/4);
    hit0=near(hit0,vec3(3,castle(pos0),1));
    pos0.y+=0.5;
    hit0=near(hit0,vec3(3,sdCappedCylinder(pos0,15,0.5),1));
    return hit0;
}