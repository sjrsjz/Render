Class:Array{
	N:ptr;
	N:DimSize;
	N:DimPtr;
	N:typeSize;
	N:init;
	N:destroy;
	N:TotalSize;
	_init_()->N:={
		init=0;destroy=0;TotalSize=0;
		DimSize=0;typeSize=0;DimPtr=0;ptr=0;
	}
	_destroy_()->N:={
		Destroy()
	}
	[Public]set_init_destroy(N:I,N:D)->N:={
		init=I;destroy=D
	}
	[Public][cdecl][ArgSize]ReDim(N:ArgSize,N:size)->Boolen:={
		Destroy();
		typeSize=size;
		DimPtr=new((ArgSize-1)*sizeof:N);
		N:i=0;N:size0=1;
		while(i<ArgSize-1){
			N:dim=(&size+(i+1)*sizeof:N)->N;
			(DimPtr+i*sizeof:N)->N=dim;
			size0=size0*dim;
			i=i+1;
		};
		TotalSize=size0;
		ptr=new(size0*size);
		printN(ptr);
		/*i=0;
		if(init!=0 and ptr!=0){
			while(i<size0){
				data_init(ptr+i*typeSize);i=i+1	
			}
		};*/
		
		return(true)
	}
	[Transit]data_init(N:ptr)->N:={return(init)}
	[Transit]data_destroy(N:ptr)->N:={return(destroy)}
	[Public][cdecl][ArgSize]"[]"(N:ArgSize)->N:={
		N:i=0;N:offset=0;
		while(i<ArgSize){
			N:index=(&ArgSize+(i+1)*sizeof:N)->N;
			offset=offset*(DimPtr+i*sizeof:N)->N+index;
			i=i+1;
		};
		return(ptr+offset*typeSize);
	}
	Destroy()->N:={
		/*N:i=0;
		if(destroy!=0 and ptr!=0){
			while(i<TotalSize){
				data_destroy(ptr+i*typeSize);i=i+1		
			}
		};*/
		DimSize=0;typeSize=0;
		if(DimPtr!=0){free(DimPtr)};
		if(ptr!=0){free(ptr)};
		DimPtr=0;ptr=0;
	}
}
Class:A{
	[Public]N:a;
	[Public]_init_()->N:={
		print(&"init ");printN(&this
	}
	[Public]_destroy_()->N:={
		print(&"destroy ");printN(&this);
	}
}
Main{
	
	main()->N:={
		Array:A.set_init_destroy(~A$_init_,~A$_destroy_);
		A.ReDim(sizeof:N,2,3);
		A[1][2]->A.a=114514;
		printN(A[1][2]->A.a);
	}
}